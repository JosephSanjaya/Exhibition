buildscript {
    dependencies {
        classpath core.bundles.firebase.plugins
        classpath core.ksp
    }
}

plugins {
    alias(core.plugins.android.app) apply false
    alias(core.plugins.android.library) apply false
    alias(core.plugins.android.test) apply false
    alias(core.plugins.kotlin) apply false
    alias(core.plugins.kotlin.noarg) apply false
    alias(core.plugins.gradle.cache.fix) apply false
    alias(core.plugins.detekt)
}

subprojects {
    plugins.withType(com.android.build.gradle.api.AndroidBasePlugin) { plugin ->
        if (it.name != "benchmark") {
            it.apply plugin: "org.gradle.android.cache-fix"
            it.apply plugin: "kotlin-android"
            it.apply plugin: "kotlin-parcelize"
            it.apply plugin: "kotlin-kapt"

            it.android {
                testOptions {
                    unitTests.returnDefaultValues = true
                }
                compileSdk core.versions.sdk.target.get().toInteger()
                buildToolsVersion core.versions.build.tools.get()
                defaultConfig {
                    minSdk core.versions.sdk.min.get().toInteger()
                    targetSdk core.versions.sdk.target.get().toInteger()
                    versionCode core.versions.app.code.get().toInteger()
                    versionName core.versions.app.name.get()
                    vectorDrawables.useSupportLibrary = true
                    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                }
                buildTypes {
                    release {
                        debuggable = false
                        minifyEnabled true
                        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                        testCoverageEnabled false
                    }
                    debug {
                        minifyEnabled false
                        debuggable true
                        testCoverageEnabled false
                        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                        ndk {
                            abiFilters "x86_64", "arm64-v8a" // includes ARM SO files only, so no x86 SO file
                        }
                    }
                }
                buildFeatures {
                    dataBinding true
                    viewBinding true
                }
                compileOptions {
                    coreLibraryDesugaringEnabled true
                    sourceCompatibility JavaVersion.VERSION_17
                    targetCompatibility JavaVersion.VERSION_17
                }
                lintOptions {
                    checkReleaseBuilds false
                    textReport true
                    abortOnError false
                }
            }
            it.dependencies {
                coreLibraryDesugaring core.desugar
                testImplementation core.lifecycle.test
                testImplementation test.bundles.test
                androidTestImplementation test.bundles.android.test
            }
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        allWarningsAsErrors = it.hasProperty("warningsAsErrors") ? it.warningsAsErrors : false
        freeCompilerArgs += listOf(
                "-progressive",
                "-Xnew-inference",
                "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-Xuse-experimental=kotlinx.coroutines.FlowPreview",
                "-Xopt-in=kotlin.RequiresOptIn",
                "-Xopt-in=kotlin.Experimental"
        )
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

task installGitHook(type: Copy) {
    from new File(rootProject.rootDir, 'pre-commit')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0777
}

tasks.getByPath(':app:preBuild').dependsOn installGitHook

apply from: 'detekt.gradle'